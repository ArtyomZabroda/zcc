#ifndef TOKEN_H_
#define TOKEN_H_

enum TokenType {
  TOKEN_TYPE_UNKNOWN, TOKEN_TYPE_EOF, TOKEN_TYPE_IDENTIFIER, TOKEN_TYPE_PPNUMBER, TOKEN_TYPE_CHAR_CONST, TOKEN_TYPE_STRING_LITERAL,

  TOKEN_TYPE_LSQUARE, TOKEN_TYPE_RSQUARE, TOKEN_TYPE_LPAREN, TOKEN_TYPE_RPAREN, TOKEN_TYPE_PERIOD, TOKEN_TYPE_ARROW,
  TOKEN_TYPE_PLUS_PLUS, TOKEN_TYPE_MINUS_MINUS, TOKEN_TYPE_AMP, TOKEN_TYPE_STAR, TOKEN_TYPE_PLUS, TOKEN_TYPE_MINUS, TOKEN_TYPE_TILDE,
  TOKEN_TYPE_EXCLAIM, TOKEN_TYPE_SLASH, TOKEN_TYPE_PERCENT, TOKEN_TYPE_LESS_LESS, TOKEN_TYPE_GREATER_GREATER,
  TOKEN_TYPE_LESS, TOKEN_TYPE_GREATER, TOKEN_TYPE_LESS_EQUAL, TOKEN_TYPE_GREATER_EQUAL, TOKEN_TYPE_EQUAL_EQUAL, TOKEN_TYPE_EXCLAIM_EQUAL,
  TOKEN_TYPE_CARET, TOKEN_TYPE_PIPE, TOKEN_TYPE_AMP_AMP, TOKEN_TYPE_PIPE_PIPE, TOKEN_TYPE_QUESTION, TOKEN_TYPE_COLON,
  TOKEN_TYPE_EQUAL, TOKEN_TYPE_STAR_EQUAL, TOKEN_TYPE_SLASH_EQUAL, TOKEN_TYPE_PERCENT_EQUAL, TOKEN_TYPE_PLUS_EQUAL,
  TOKEN_TYPE_MINUS_EQUAL, TOKEN_TYPE_LESS_LESS_EQUAL, TOKEN_TYPE_GREATER_GREATER_EQUAL, TOKEN_TYPE_AMP_EQUAL, TOKEN_TYPE_CARET_EQUAL,
  TOKEN_TYPE_PIPE_EQUAL, TOKEN_TYPE_COMMA, TOKEN_TYPE_HASH, TOKEN_TYPE_HASH_HASH, TOKEN_TYPE_SEMICOLON, TOKEN_TYPE_ELLIPSIS, TOKEN_TYPE_LBRACE, TOKEN_TYPE_RBRACE,
  TOKEN_TYPE_HEADER_NAME
};

struct Token {
  enum TokenType type;
  const char *data;
  int length;
  int line;
};

#endif
